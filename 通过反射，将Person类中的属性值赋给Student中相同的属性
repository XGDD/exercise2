package www.bit.com;

import java.lang.reflect.Field;
import java.lang.reflect.InvocationTargetException;
import java.lang.reflect.Method;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;

class Person {
    public int age;
    public String name;
    public Date birthday;

    public Person(int age, String name, Date birthday) {
        this.age = age;
        this.name = name;
        this.birthday = birthday;
    }

    public int getAge() {
        return age;
    }

    public void setAge(int age) {
        this.age = age;
    }

    public String getName() {
        return name;
    }

    public void setName(String name) {
        this.name = name;
    }

    public Date getBirthday() {
        return birthday;
    }

    public void setBirthday(Date birthday) {
        this.birthday = birthday;
    }

    @Override
    public String toString() {
        return "Person{" +
                "age=" + age +
                ", name='" + name + '\'' +
                ", birthday=" + birthday +
                '}';
    }
}

class Student{
    public int age;
    public String school;
    public Date birthday;

    public int getAge() {
        return age;
    }

    public void setAge(int age) {
        this.age = age;
    }

    public String getSchool() {
        return school;
    }

    public void setSchool(String school) {
        this.school = school;
    }

    public Date getBirthday() {
        return birthday;
    }

    public void setBirthday(Date birthday) {
        this.birthday = birthday;
    }

    @Override
    public String toString() {
        return "Student{" +
                "age=" + age +
                ", school='" + school + '\'' +
                ", birthday=" + birthday +
                '}';
    }
}

public class Test{
    public static void main(String[] args) throws ParseException {
        SimpleDateFormat sdf = new SimpleDateFormat("2001-07-03");
        Person per = new Person(18,"Calm", sdf.parse("2001-07-03"));
        Student stu = new Student();
        Class perClass = per.getClass();
        Class stuClass = stu.getClass();
        //取得Person类中的所有属性
        Field[] fields = perClass.getDeclaredFields();
        //取得Student类中的所有属性
        Field[] stuFields = stuClass.getDeclaredFields();
        for(Field s : stuFields){
            String stuFiledName = s.getName();
            //依次取得Student中每个属性的set方法
            String stuMethodName = "set"+stuFiledName.substring(0, 1).toUpperCase()
                    +(stuFiledName.length() > 1 ? stuFiledName.substring(1) : "");
            //依次取得每个属性
            for(Field f : fields){
                try {
                    //依次取得Person类中每个属性的值
                    Object value = f.get(per);
                    //依次取得每个属性的名称
                    String filedName = f.getName();
                    //得到每个属性的set方法名   例：setName  setAge  setBirthday...
                    String methodName = "set"+filedName.substring(0, 1).toUpperCase()
                            //如果属性名是一个字母，则只取第一个字母的大写，后边取空字符串
                            +(filedName.length() > 1 ? filedName.substring(1) : "");
                    //保证Student中的属性在Person中也有，例：school在Person中没有，就不能进行赋值
                    if(stuMethodName.equals(methodName)){
                        //获得Student中某个属性的set方法
                        Method setMethod = stuClass.getDeclaredMethod(methodName, f.getType());
                        //将Person中该属性的值赋给Student中的该属性，例：相当于调用Student中的setName(value)
                        setMethod.invoke(stu, value);
                    }
                } catch (IllegalAccessException e) {
                    e.printStackTrace();
                } catch (NoSuchMethodException e) {
                    e.printStackTrace();
                } catch (InvocationTargetException e) {
                    e.printStackTrace();
                }
            }
        }
        System.out.println(per);
        System.out.println(stu);
    }
}
