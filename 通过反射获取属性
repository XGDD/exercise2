package www.bit.com;

import java.io.File;
import java.lang.reflect.Field;
import java.lang.reflect.Method;

class Person{
    public Integer age;
    public String name;

    public Person(){

    }

    public Person(int age, String name){
        this.age = age;
        this.name = name;
    }

    public Integer getAge() {
        return age;
    }

    public void setAge(Integer age) {
        this.age = age;
    }

    public String getName() {
        return name;
    }

    public void setName(String name) {
        this.name = name;
    }

    @Override
    public String toString() {
        return "Person{" +
                "age=" + age +
                ", name='" + name + '\'' +
                '}';
    }
}

class Student extends Person{
    public String school;

    public String getSchool() {
        return school;
    }

    public void setSchool(String school) {
        this.school = school;
    }
}

public class Test{
    public static void main(String[] args) {
        Class cl = Student.class;
        try {
            //实例化一个Student类对象
            Object studentObject = cl.newInstance();
            //获取字段
            Field[] files = cl.getFields();
            for(Field field : files) {
                System.out.println(field.getName()+" "+field.getType().getName());
            }
        } catch (InstantiationException e) {
            e.printStackTrace();
        } catch (IllegalAccessException e) {
            e.printStackTrace();
        }
    }
}



package www.bit.com;

import java.io.File;
import java.lang.reflect.Field;
import java.lang.reflect.Method;

class Person{
    public Integer age;
    public String name;

    public Person(){

    }

    public Person(int age, String name){
        this.age = age;
        this.name = name;
    }

    public Integer getAge() {
        return age;
    }

    public void setAge(Integer age) {
        this.age = age;
    }

    public String getName() {
        return name;
    }

    public void setName(String name) {
        this.name = name;
    }

    @Override
    public String toString() {
        return "Person{" +
                "age=" + age +
                ", name='" + name + '\'' +
                '}';
    }
}

class Student extends Person{
    public String school;

    public String getSchool() {
        return school;
    }

    public void setSchool(String school) {
        this.school = school;
    }
}

public class Test{
    public static void main(String[] args) {
        Class cl = Student.class;
        try {
            //实例化一个Student类对象
            Object studentObject = cl.newInstance();
            //获取字段,只获取自己的属性（public和private）
            Field[] files = cl.getDeclaredFields();
            for(Field field : files) {
                System.out.println(field.getName()+" "+field.getType().getName());
            }
        } catch (InstantiationException e) {
            e.printStackTrace();
        } catch (IllegalAccessException e) {
            e.printStackTrace();
        }
    }
}
