class Print{
    int flag = 1;
    int count = 0;
    public synchronized void printA(){
        while(flag != 1){//不用if是因为每次只进来一个线程，不是A的话，会一直wait，然后notiftAll，会释放所有wait，
                        // 如果第二次C先进来，会直接从wait后边开始执行，线程C会输出A，这是错误的
            try {
                wait();
            } catch (InterruptedException e) {
                e.printStackTrace();
            }
        }
        System.out.print("A");
        count++;
        flag = 2;
        notifyAll();
    }
    public synchronized void printB(){
        while(flag != 2){
            try {
                wait();
            } catch (InterruptedException e) {
                e.printStackTrace();
            }
        }
        System.out.print("B");
        count++;
        flag = 3;
        notifyAll();
    }
    public synchronized void printC(){
        while(flag != 3){
            try {
                wait();
            } catch (InterruptedException e) {
                e.printStackTrace();
            }
        }
        System.out.print("C");
        count++;
        flag = 1;
        notifyAll();
    }
}
class MyThread implements Runnable{
    private Print print;

    public MyThread(Print print) {
        this.print = print;
    }

    @Override
    public void run(){
        while(print.count < 16){//控制ABC输出5遍
            if(Thread.currentThread().getName().equals("A")){//锁的是print对象，只有一个对象，所以每次要竞争
                print.printA();
            }else if(Thread.currentThread().getName().equals("B")){
                print.printB();
            }else if(Thread.currentThread().getName().equals("C")){
                print.printC();
            }
        }
    }
}
public class Test {
    public static void main(String[] args) {
        Print print = new Print();
        MyThread myThread = new MyThread(print);
        Thread thread1 = new Thread(myThread, "A");
        Thread thread2 = new Thread(myThread, "B");
        Thread thread3 = new Thread(myThread, "C");
        thread1.start();//三个Thread所以3个run，可以说是3个线程同时进入各自的run，进入各自的run后，开始竞争print对象
                        //哪个线程先竞争到，哪个线程先执行，ABC的顺序是通过flag来控制的
        thread2.start();
        thread3.start();
    }
}
