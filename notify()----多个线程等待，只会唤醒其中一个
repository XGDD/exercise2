package www.java.test;

class MyThread implements Runnable{
    private Object object;
    private boolean flag;

    public MyThread(Object object, boolean flag) {
        this.object = object;
        this.flag = flag;
    }
    public void waitMethod(){
        synchronized (object){
            System.out.println("wait方法开始..."+Thread.currentThread().getName());
            try {
                object.wait();
            } catch (InterruptedException e) {
                e.printStackTrace();
            }
            System.out.println("wait方法结束..."+Thread.currentThread().getName());
        }
    }
    public void notifyMethod(){
        synchronized (object){
            System.out.println("notify方法开始..."+Thread.currentThread().getName());
            object.notify();
            System.out.println("notify方法结束..."+Thread.currentThread().getName());
        }
    }
    @Override
    public void run() {
        if(flag){
            waitMethod();
        }else{
            notifyMethod();
        }
    }
}

public class Test{
    public static void main(String[] args) throws InterruptedException {
        Object object = new Object();
        MyThread mt1 = new MyThread(object,true);
        MyThread mt2 = new MyThread(object,false);
        for(int i = 0; i < 10; i++){
            Thread threadi = new Thread(mt1,"等待线程"+i);
            threadi.start();
        }
        Thread notifyThread = new Thread(mt2,"唤醒线程");
        Thread.sleep(1000);
        notifyThread.start();
    }
}
