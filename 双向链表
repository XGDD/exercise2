import java.net.SocketTimeoutException;

interface  ILink {
    /**
     * 链表增加节点操作
     * @param data 节点内容
     * @return
     */
    boolean add(Object data);

    /**
     * 判断指定内容节点在链表中是否存在
     * @param data 要判断的内容
     * @return 返回找到的节点索引
     */
    int contains(Object data);

    /**
     * 删除指定内容节点
     * @param data
     * @return
     */
    boolean remove(Object data);

    /**
     * 根据指定下标修改节点内容
     * @param index 索引下标
     * @param newData 替换后的内容
     * @return 替换之前的节点内容
     */
    Object set(int index,Object newData);

    /**
     * 根据指定下标返回节点内容
     * @param index
     * @return
     */
    Object get(int index);

    /**
     * 链表清空
     */
    void clear();

    /**
     * 将链表转为数组
     * @return 返回所有节点内容
     */
    Object[] toArray();

    /**
     * 链表长度
     * @return
     */
    int size();

    /**
     * 遍历链表
     */
    void printLink();
}
class LinkImpl implements ILink{
    private int size;
    private Node head;
    private Node last;
    private Object data;
    //-------------------内部类----------------
    private class Node{
        private Node pre;
        private Object data;
        private Node next;
        public Node(Node pre, Object data, Node next){
            this.pre = pre;
            this.data = data;
            this.next = next;
        }
    }
    //-----------------------------------------
    public int size(){
        return this.size;
    }

    public boolean add(Object data){
        Node temp = this.last;
        Node newNode = new Node(temp, data, null);
        this.last = newNode;
        if(this.head == null){
            this.head = newNode;
        }else{
            temp.next = newNode;
        }
        this.size++;
        return true;
    }
    public void printLink(){
        for(Node temp = this.head; temp != null; temp = temp.next){
            System.out.println(temp.data);
        }
    }
    public Object[] toArray(){
        Object[] result = new Object[size];
        for(int i = 0; i < size; i++){
            Node temp = this.head;
            result[i++] = temp.data;
            temp = temp.next;
        }
        return result;
    }
    public void clear(){
        for(Node temp = this.head; temp != null;){
            Node cur = temp.next;
            temp.pre = temp.next = null;
            temp = cur;
            this.size--;
        }
        this.head = this.last = null;
    }
    public int contains(Object data){
        if(data == null){
            Node temp = this.head;
            for(int i = 0; i < this.size; i++){
                if(temp.data == null){
                    return i;
                }else{
                    temp = temp.next;
                }
            }
            return -1;
        }else{
            Node temp = this.head;
            for(int i = 0; i < this.size; i++){
                if(temp.data.equals(data)){
                    return i;
                }else{
                    temp = temp.next;
                }
            }
            return -1;
        }
    }
    public Object get(int index){
        if(!isLinkElement(index)){
            return null;
        }else{
            return node(index).data;
        }
    }
    public Object set(int index,Object newData){
        if(!isLinkElement(index)){
            return null;
        }
        Node temp = this.head;
        for(int i = 0; i < size; i++){
            Node cur = temp;
            if(i == index){
                data = temp.data;
                temp.data = newData;
                return data;
            }else{
                temp = temp.next;
            }
        }
        return null;
    }
    public boolean remove(Object data){
        if(data == null){
            for(Node temp = this.head; temp != null; temp = temp.next){
                if(temp.data == null) {
                    unLink(temp);
                    return true;
                }
            }
            return false;
        }
        for(Node temp = this.head; temp != null; temp = temp.next){
            if(temp.data.equals(data)) {
                unLink(temp);
                return true;
            }
        }
        return false;
    }
    private void unLink(Node x){
        Node pre = x.pre ;
        Node next = x.next ;
        if(pre == null){//删除的是头结点
            this.head = next;
        }else{
            pre.next = next;
            x.pre = null;
        }
        if(next == null) {//说明删的是尾结点
            this.last = pre;
        }else{
            next.pre = pre;
            x.next = null;
        }
       // x.data = null;
        this.size--;
    }
    private Node node(int index){
        if(index < (size >> 1)){
            Node temp = this.head;
            for(int i = 0; i < size; i++){
                if(i == index){
                    return temp;
                }else{
                    temp = temp.next;
                }
            }
        }else{
            Node temp = this.last;
            for(int i = size-1; i >= 0; i--){
                if(i == index){
                    return temp;
                }else{
                    temp = temp.pre;
                }
            }
        }
        return null;
    }
    private boolean isLinkElement(int index){
        return index >= 0 && index < this.size;
    }
}

public class Test{
    public static void main(String[] args){
        LinkImpl node = new LinkImpl();
        node.add("火车头");
        node.add("车厢1");
        node.add("车厢2");
        node.add(null);
        node.add("火车尾");
        node.remove(null);
        //System.out.println(node.set(1, "车厢5"));
        //node.clear();
        //node.toArray();
        node.printLink();
        System.out.println(node.size());
        //System.out.println(node.contains(null));
        //System.out.println(node.contains("车厢1"));
        //System.out.println(node.contains("重新"));
        //System.out.println(node.toArray().length);
        //System.out.println(node.get(2));
    }
}
